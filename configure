#! /bin/sh

### See http://people.gnome.org/~walters/docs/build-api.txt
# buildapi-variable-no-builddir

# Show help if requested.
#
for var in "$@" ; do
	if test "${var}" = '--help' ; then
		cat <<-EOF
		usage: $0 [options]
		Available options:

		  --help           This help message.
		  --prefix=PATH    Installation path prefix [default: /usr].
		  --objdir=PATH    Build directory [default: $(pwd)].
		  --debug          Do a debug build without optimizations.
		  --enable-trace   Enable TRACE(), for debugging purposes.
		  --enable-asan    Compile with ASAN support (needs Clang).

		The following environment variables, if set, will be honored:

		  CC               C compiler to use.
		  CFLAGS           Additional flags passed to the C compiler.
		  CPPFLAGS         Additional flags passed to the C preprocessor.
		  LIBS             Additional libraries to link binaries to.

		NOTE: This script tries to mimic the behaviour of "configure" scripts
		generated by GNU Autotools, and it will silently ignore unrecognized
		command line options in order to do so.
		EOF
		exit
	fi
done


die ()
{
	echo "$*" 1>&2
	exit 1
}


pick_one ()
{
	while test -n "$1" ; do
		if which "$1" &> /dev/null ; then
			echo "$1"
			return
		fi
		shift
	done
}


compiler_is_clang ()
{
	test 'clang ' = "$(expr substr "$("$1" -v 2>&1)" 1 6)"
}


# Usage: try_link <compiler-flags> <<-EOF
#  	PROGRAM
# EOF
try_link ()
{
	echo -n "Checking for $1 in $2 ... "
	shift
	local tempfile="/tmp/compile-test-$$.c"
	local result=1
	cat > "${tempfile}"
	if "${CC}" ${CFLAGS} -o "${tempfile}.out" "${tempfile}" \
		${LDFLAGS} ${LIBS} "$@" &> /dev/null
	then
		echo yes
		result=0
	else
		echo no
	fi
	rm -f "${tempfile}" "${tempfile}.out"
	return ${result}
}


# Usage: try_header <header> <compiler-flags>
try_header ()
{
	echo -n "Checking for $1 ... "
	local tempfile="/tmp/preprocess-test-$$.c"
	local result=1
	cat > "${tempfile}" <<-EOF
	#include $1
	EOF
	shift
	if "${CC}" ${CFLAGS} -o "${tempfile}.i" "${tempfile}" \
		${CPPFLAGS} -E "$@" &> /dev/null
	then
		echo yes
		result=0
	else
		echo no
	fi
	rm -f "${tempfile}" "${tempfile}.i"
	return ${result}
}


# Usage: mandatory_header <header> <compiler-flags>
mandatory_header ()
{
	try_header "$@" || die "Header $1 is needed"
}


# Inherit variables from the environment, if defined. For tools,
# try to make a sensible choice by default.
#
test -n "${CPPFLAGS}" && EXTRA_CPPFLAGS=${CPPFLAGS}
test -n "${CFLAGS}"   && EXTRA_CFLAGS=${CFLAGS}
test -n "${CC}"       || CC=$(pick_one clang gcc cc)

# We only support POSIX systems.
CPPFLAGS='-DLUA_USE_POSIX=1'

if compiler_is_clang "${CC}" ; then
	CFLAGS='-Qunused-arguments -Wno-parentheses-equality -Wno-array-bounds'
fi


# Inspect arguments and generate build.conf
#
echo "# autogenerated by: $0 $*" > build.conf
debug_build=false
enable_asan=false
enable_trace=false
objdir=$(pwd)
for var in "$@" ; do
	case ${var} in
		CFLAGS=* | LDFLAGS=* | LIBS=*)
			echo "Setting EXTRA_${var}"
			echo "EXTRA_${var}" >> build.conf
			;;

		--prefix=*)
			var=$(echo "${var}" | sed 's/^--prefix=//')
			echo "Setting PREFIX=${var}"
			PREFIX=${var}
			;;

		--objdir=*)
			var=$(echo "${var}" | sed 's/^--objdir=//')
			echo "Setting objdir=${var}"
			objdir=${var}
			;;

		--debug)
			debug_build=true
			;;

		--enable-asan)
			enable_asan=true
			;;
		--disable-asan)
			enable_asan=false
			;;

		--enable-trace)
			enable_trace=true
			;;
		--disable-trace)
			enable_trace=false
			;;

		*)
			true
			;;
	esac
done

build_type='release'
if ${debug_build} ; then
	build_type='debug'
	CFLAGS="${CFLAGS} -O0 -g"
	LDFLAGS="${LDFLAGS} -g"
	CPPFLAGS="${CPPFLAGS} -DLUA_USE_APICHECK=1"
else
	if ${enable_asan} ; then
		CFLAGS="${CFLAGS} -O1 -g"
		build_type="${build_type} (+asan)"
	else
		CFLAGS="${CFLAGS} -O2 -g"
		#
		# All reasonably recent versions of Clang support LTO.
		#
		if compiler_is_clang "${CC}" ; then
			CFLAGS="${CFLAGS} -flto"
			LDFLAGS="${LDFLAGS} -flto"
		fi
	fi
fi

if ${enable_asan} ; then
	if ! compiler_is_clang "${CC}" ; then
		echo "ASAN only works when building with Clang" 1>&2
		exit 1
	fi
	LDFLAGS="${CFLAGS} -fsanitize=address"
	CFLAGS="${CFLAGS} -fsanitize=address"
	build_type="${build_type} (+asan)"
fi

if ${enable_trace} ; then
	CPPFLAGS="${CPPFLAGS} -DERIS_TRACE=1"
	build_type="${build_type} (+trace)"
fi

echo "Build type: ${build_type}"

# Mandatory headers and libraries.
mandatory_header '<dlfcn.h>'

if ! try_link 'elf_begin()' -lelf <<-EOF
	#include <libelf.h>
	int main () { Elf* elf = elf_begin (0, ELF_C_READ, (Elf*) 0); return 0; }
	EOF
then
	die 'Could not find libelf'
fi

if ! try_link 'dwarf_init()' -ldwarf -lelf <<-EOF
	#include <libdwarf/libdwarf.h>
	int main () { return dwarf_init (0, 0, 0, 0, 0, 0); }
	EOF
then
	die 'Could not find libdwarf'
fi

if try_link 'dlopen()' -ldl <<-EOF
	#include <dlfcn.h>
	int main () { return dlopen ((void*) 0, 0) != (void*) 0; }
	EOF
then
	CPPFLAGS="${CPPFLAGS} -DLUA_USE_DLOPEN=1"
	LIBS="${LIBS} -ldl"
else
	die 'Could not find libdl'
fi


##################################### Optional headers and libraries ######

if try_link 'readline()' -lreadline <<-EOF
	#include <stdio.h>
	#include <readline/readline.h>
	int main () { char* r = readline ("prompt"); return 0; }
	EOF
then
	CPPFLAGS="${CPPFLAGS} -DLUA_USE_READLINE=1"
	LIBS="${LIBS} -lreadline"
fi

####################################################### Final fixups ######

cat >> build.conf <<EOF
prefix   = ${PREFIX}
cc       = ${CC}
CFLAGS   = ${CFLAGS} \${EXTRA_CFLAGS}
CPPFLAGS = ${CPPFLAGS} \${EXTRA_CPPFLAGS}
LDFLAGS  = ${LDFLAGS} \${EXTRA_LDFLAGS}
libs     = ${LIBS} \${EXTRA_LIBS}
obj      = ${objdir}
EOF
echo "build.conf written"
