#! /bin/sh

### See http://people.gnome.org/~walters/docs/build-api.txt
# buildapi-variable-no-builddir

# Show help if requested.
#
for var in "$@" ; do
	if test "${var}" = '--help' ; then
		cat <<-EOF
		usage: $0 [options]
		Available options:

		  --help          This help message.
		  --prefix=PATH   Installation path prefix [default: /usr].
		  --objdir=PATH   Build directory [default: $(pwd)].
		  --debug         Do a debug build without optimizations.
		  --asan          Compile with ASAN support (needs Clang) .

		The following environment variables, if set, will be honored:

		  CC               C compiler to use.
		  CFLAGS           Additional flags passed to the C compiler.
		  CPPFLAGS         Additional flags passed to the C preprocessor.
		  LIBS             Additional libraries to link binaries to.

		NOTE: This script tries to mimic the behaviour of "configure" scripts
		generated by GNU Autotools, and it will silently ignore unrecognized
		command line options in order to do so.
		EOF
		exit
	fi
done


die ()
{
	echo "$*" 1>&2
	exit 1
}


pick_one ()
{
	while test -n "$1" ; do
		if which "$1" &> /dev/null ; then
			echo "$1"
			return
		fi
		shift
	done
}


compiler_is_clang ()
{
	test 'clang ' = "$(expr substr "$("$1" -v 2>&1)" 1 6)"
}


# Usage: try_link <compiler-flags> <<-EOF
#  	PROGRAM
# EOF
try_link ()
{
	echo -n "Checking for $1 ... "
	local tempfile="/tmp/compile-test-$$.c"
	local result=1
	cat > "${tempfile}"
	if "${CC}" ${CFLAGS} -o "${tempfile}.out" "${tempfile}" \
		${LDFLAGS} ${LIBS} "$@" &> /dev/null
	then
		echo yes
		result=0
	else
		echo no
	fi
	rm -f "${tempfile}" "${tempfile}.out"
	return ${result}
}


# Inherit variables from the environment, if defined. For tools,
# try to make a sensible choice by default.
#
test -n "${CPPFLAGS}" && EXTRA_CPPFLAGS=${CPPFLAGS}
test -n "${CFLAGS}"   && EXTRA_CFLAGS=${CFLAGS}
test -n "${CC}"       || CC=$(pick_one clang gcc cc)

# We only support POSIX systems.
CPPFLAGS='-DLUA_USE_POSIX=1'

# All reasonably recent versions of Clang support LTO.
#
if compiler_is_clang "${CC}" ; then
	CFLAGS='-Qunused-arguments -Wno-parentheses-equality -Wno-array-bounds -flto'
	LDFLAGS='-flto'
fi


# Inspect arguments and generate config.ninja
#
echo "# autogenerated by: $0 $*" > config.ninja
debug_build=false
asan_build=false
objdir=$(pwd)
for var in "$@" ; do
	case ${var} in
		CFLAGS=* | LDFLAGS=* | LIBS=*)
			echo "Setting EXTRA_${var}"
			echo "EXTRA_${var}" >> config.ninja
			;;
		--prefix=*)
			var=$(echo "${var}" | sed 's/^--prefix=//')
			echo "Setting PREFIX=${var}"
			PREFIX=${var}
			;;
		--objdir=*)
			var=$(echo "${var}" | sed 's/^--objdir=//')
			echo "Setting objdir=${var}"
			objdir=${var}
			;;
		--debug)
			debug_build=true
			;;
		--asan)
			asan_build=true
			;;
		*)
			true
			;;
	esac
done

if ${debug_build} ; then
	echo "Build type: debug"
	CFLAGS="${CFLAGS} -O0 -g"
else
	echo "Build type: release"
	if ${asan_build} ; then
		CFLAGS="${CFLAGS} -O1 -g"
	else
		CFLAGS="${CFLAGS} -O2 -g"
	fi
fi

if ${asan_build} ; then
	if ! compiler_is_clang "${CC}" ; then
		echo "ASAN only works when building with Clang" 1>&2
		exit 1
	fi
	LDFLAGS="${CFLAGS} -fsanitize=address"
	CFLAGS="${CFLAGS} -fsanitize=address"
fi


# Mandatory libraries
if ! try_link -lelf <<-EOF
	#include <libelf.h>
	int main () { Elf* elf = elf_begin (0, ELF_C_READ, (Elf*) 0); return 0; }
	EOF
then
	die "Could not find libelf"
fi

if ! try_link -ldwarf -lelf <<-EOF
	#include <libdwarf/libdwarf.h>
	int main () { return dwarf_init (0, 0, 0, 0, 0, 0); }
	EOF
then
	die "Could not find libdwarf"
fi

# Optional libraries
if try_link -ldl <<-EOF
	#include <dlfcn.h>
	int main () { return dlopen ((void*) 0, 0) != (void*) 0; }
	EOF
then
	CPPFLAGS="${CPPFLAGS} -DLUA_USE_DLOPEN=1"
	LIBS="${LIBS} -ldl"
fi

if try_link -lreadline <<-EOF
	#include <stdio.h>
	#include <readline/readline.h>
	int main () { char* r = readline ("prompt"); return 0; }
	EOF
then
	CPPFLAGS="${CPPFLAGS} -DLUA_USE_READLINE=1"
	LIBS="${LIBS} -lreadline"
fi


cat >> config.ninja <<EOF
prefix   = ${PREFIX}
cc       = ${CC}
CFLAGS   = ${CFLAGS} \${EXTRA_CFLAGS}
CPPFLAGS = ${CPPFLAGS} \${EXTRA_CPPFLAGS}
LDFLAGS  = ${LDFLAGS} \${EXTRA_LDFLAGS}
libs     = ${LIBS} \${EXTRA_LIBS}
obj      = ${objdir}
EOF
echo "config.ninja written"
